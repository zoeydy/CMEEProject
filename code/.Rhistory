getwd()
setwd(~/Documents)
############# Exploring the data (extend the script below)  ###############
# tidyverse
# install.packages(c("tidyverse"))
# sudo apt install r-cran-tidyverse
require(tidyverse)
warnings()
install.packages("tidyverse")
require(tidyverse)
library(tidyverse)
install.packages("tidyverse")
install.packages("tidyverse")
library(tidyverse)
############# Exploring the data (extend the script below)  ###############
# tidyverse
# !!!!!!!!!!!!!!!!!!!!!!!!!
# install.packages(c("tidyverse"))
# sudo apt install r-cran-tidyverse
require(tidyverse)
# list the package to if there are some name-conflict-masking messages
tidyverse_packages(include_self = TRUE) # the include_self = TRUE means list "tidyverse" as well
install.packages("raster", "sf", "sp", "rgeos", "rgdal", "lwgeom")
install.packages("raster", "sp", "rgeos", "rgdal", "lwgeom")
install.packages("raster" "sf" "sp" "rgeos" "rgdal" "lwgeom")
install.packages("raster")
require(raster)
install.packages('raster')
install.packages('sf')
require(raster)
require(sf)
install.packages('sf')
install.packages('sp')
install.packages("sp")
install.packages('sf') # Core vector GIS data package
install.packages('rgeos') # Extends vector data functionality
install.packages('rgdal') # Interface to the Geospatial Data Abstraction Library
install.packages('lwgeom') # Extends vector data functionality
library(rgdal)
library(raster)
library(sf)
library(sp)
library(units)
install.packages('raster') # Core raster GIS data package
install.packages('sf') # Core vector GIS data package
install.packages('raster') # Core raster GIS data package
install.packages('sf') # Core vector GIS data package
install.packages('sp') # Another core vector GIS package
install.packages('rgeos') # Extends vector data functionality
install.packages('rgdal') # Interface to the Geospatial Data Abstraction Library
install.packages('lwgeom') # Extends vector data functionality
library(rgdal)
library(raster)
library(sf)
library(sp)
library(units)
install.packages('rgeos')
install.packages('rgeos')
require(rgeos)
install.packages('rgdal')
install.packages('rgdal')
require(rgdal)
install.packages('lwgeom')
devtools::install_github("r-spatial/lwgeom")
install.packages('lwgeom')
install.packages('sf')
install.packages('lwgeom')
rm(list = ls())
View(result)
require(doParallel)
# do several simulations
cl <- makeCluster(100)
registerDoParallel(cl)
sim_genetic_drive <- function(q0, d, t, N0, R0, M){
if(q0 <= 0 || q0 >0.5){
stop('make sure 0<q0<0.5')
}
if(d<=0.5 || d>1){
stop('make sure 0.5<d<1')
}
bh <- function(N, R0, M){
return(ceiling(R0*N/(1+N/M)))
}
count_genotype <- function(x){
temp <- apply(x, 2, sum)
return(c(sum(temp==0),sum(temp==1), sum(temp==2)))
}
population <- list()
length(population) <- (t+1)
population.size <- rep(NA, t+1)
TG.freq <- rep(NA, t+1)
population.size[1] <- N0
TG.freq[1] <- q0
k <- ceiling(2*N0*q0)
population[[1]] <- cbind(matrix(c(0,0), nrow = 2, ncol = N0-k), matrix(c(0,1), nrow = 2, ncol = k))
genotype <- count_genotype(population[[1]])
for (i in t) {
population.size[[i+1]] <- bh(genotype[1]+genotype[2], R0, M)
if(population.size[i+1]<=1){
print(paste0('Population crashed after generation ', i))
return(list(population[1:i], population.size[1:i], TG.freq[1:i]))
}
if(genotype[2]+genotype[3]==0){
print(paste0('TG allele went extinct after generation ', i))
return(list(population[1:i], population.size[1:i], TG.freq[1:i]))
}
TG.gametic.freq <- d*genotype[2]/(genotype[1]+genotype[2])
# sample the next generation
population[[i+1]] <- matrix(
sample(0:1, size = 2*population.size[i+1],
prob = c(1-TG.gametic.freq, TG.gametic.freq), replace = TRUE),
nrow=2)
# calculate new genotype counts and TG frequency
genotype <- count_genotype(population[[i+1]])
TG.freq[i+1] <- (0.5*genotype[2]+genotype[3]) / population.size[i+1]
}
return(list(population=population, population.size= population.size, TG.freq=TG.freq))
}
# do several simulations
cl <- makeCluster(100)
registerDoParallel(cl)
result <- foreach(1:100, .combine = 'c') %dopar%{
data <- sim_genetic_drive(q0=0.05, d=0.6, t=10, N0=500, R0=2, M=500)
return(mean(data$population_size), var(data$population_size))
}
result
# do several simulations
cl <- makeCluster(100)
registerDoParallel(cl)
result <- foreach(1:100, .combine = 'c') %dopar%{
data <- sim_genetic_drive(q0=0.05, d=0.6, t=10, N0=500, R0=2, M=500)
return(list(mean(data$population_size), var(data$population_size)))
}
result
result <- foreach(1:100, .combine = 'c') %dopar%{
data <- sim_genetic_drive(q0=0.05, d=0.6, t=10, N0=500, R0=2, M=500)
return(mean(data$population_size))
}
result
stopCluster()
result
# do several simulations
cl <- makeCluster(100)
registerDoParallel(cl)
result <- foreach(1:100, .combine = 'c') %dopar%{
data <- sim_genetic_drive(q0=0.05, d=0.6, t=10, N0=500, R0=2, M=500)
return(mean(data))
}
stopCluster()
result
# do several simulations
cl <- makeCluster(100)
registerDoParallel(cl)
result <- foreach(1:100, .combine = 'c') %dopar%{
data <- sim_genetic_drive(q0=0.05, d=0.6, t=50, N0=500, R0=2, M=500)
return(mean(data))
}
stopCluster()
result
sim_genetic_drive(q0=0.05, d=0.6, t=10, N0=500, R0=2, M=500)
sim_genetic_drive(q0=0.05, d=0.6, t=10, N0=500, R0=2, M=500)
# do several simulations
cl <- makeCluster(100)
registerDoParallel(cl)
result <- foreach(1:100, .combine = 'c') %dopar%{
data <- sim_genetic_drive(q0=0.05, d=0.6, t=50, N0=500, R0=2, M=500)
return()
}
stopCluster()
result
install.packages("matrixcalc")
install.packages("matlib")
version
install.packages("matlib")
source('~/.active-rstudio-document', echo=TRUE)
P100
library(matlib)
A <- matrix(c(5,1,3,-1,2,2,2,-1,-1), nrow = 3)
a <- c(6,-1,1)
solve(A, a)
A <- matrix(c(3,5,2,2,3,4,1,2,1), nrow = 3)
a <- c(500,900,550)
solve(A, a)
A <- matrix(c(3,5,2,2,3,4), nrow = 2)
a <- c(500,900)
plotEqn(A,a)
plotEqn3d(A,a)
require(matrixcalc)
M <- matrix(c(0.94,0.05,0.01,0.02,0.86,0.12,0.01,0.06,0.93),nrow = 3)
matrix.power(M, 19)
matrix.power(M, 3)
matrix.power(M, 1)
matrix.power(M, 2)
matrix.power(M, 3)
matrix.power(M, 4)
matrix.power(M, 5)
matrix.power(M, 6)
matrix.power(M, 7)
matrix.power(M, 8)
a <- 26+41+74
matrix(c(26/a,41/a, 74/a), nrow = 3, ncol = 1)
matrix.power(M, 100)
eigen(M)
M <- matrix(c(0.8,0.2,0.1,0.9),nrow = 2)
matrix.power(M, 1)
matrix.power(M, 2)
matrix.power(M, 3)
matrix.power(M, 4)
matrix.power(M, 5)
matrix.power(M, 6)
matrix.power(M, 7)
matrix.power(M, 100)
eigen(M)
M <- matrix(c(3,-2,3,2,-2,6,-1,2,-1),nrow = 3)
eigen(M)
M <- matrix(c(0.8,0.2,0.1,0.9),nrow = 2)
matrix.power(M, 1)
matrix.power(M, 2)
matrix.power(M, 3)
matrix.power(M, 4)
matrix.power(M, 5)
matrix.power(M, 6)
matrix.power(M, 7)
matrix.power(M, 100)
eigen(M)
M <- matrix(c(8,2,1,9),nrow = 2)
matrix.power(M, 1)
matrix.power(M, 2)
matrix.power(M, 3)
matrix.power(M, 4)
matrix.power(M, 5)
matrix.power(M, 6)
matrix.power(M, 7)
matrix.power(M, 100)
eigen(M)
M <- matrix(c(0.8,0.2,0.1,0.9),nrow = 2)
matrix.power(M, 1)
matrix.power(M, 2)
matrix.power(M, 3)
matrix.power(M, 4)
matrix.power(M, 5)
matrix.power(M, 6)
matrix.power(M, 7)
matrix.power(M, 100)
eigen(M)
M <- matrix(c(0.2,0.8,0.9,0.1),nrow = 2)
matrix.power(M, 1)
matrix.power(M, 2)
matrix.power(M, 3)
matrix.power(M, 4)
matrix.power(M, 5)
matrix.power(M, 6)
matrix.power(M, 7)
matrix.power(M, 100)
eigen(M)
M <- matrix(c(0.9,0.1,0.2,0.8),nrow = 2)
matrix.power(M, 1)
matrix.power(M, 2)
matrix.power(M, 3)
matrix.power(M, 4)
matrix.power(M, 5)
matrix.power(M, 6)
matrix.power(M, 7)
matrix.power(M, 100)
eigen(M)
ggplot(data = info4, aes(x = log.one.t, y = log.r)) +
geom_point(size = 1) +
stat_smooth(formula = y~x, method = lm, se = TRUE)
save.plot("../results/rt_plot/log_rt_temp",p)
rm(list = ls())
graphics.off()
setwd("~/Documents/CMEEProject/code")
require(ggplot2)
library(ggpubr)
#################
# read the data #
#################
Data <- read.csv('../data/pop.csv')
Data <- Data[order(Data[,'id'], Data[,'Time']),]
IDs <- unique(Data$id)
# plot data
plot.df <- read.csv("../data/gomp.plot.csv")
# info
infos <- read.csv("../data/gomp.info.csv")
info0 <- subset(infos, infos$rmax > 0 & infos$tlag > 0)
info0[, "temp_c"] <- round(info0[, "temp_c"], digits = 2)
info0$log.one.t <- log(1/info0$tlag)
info0$log.r <- log(info0$rmax)
# set boltzmann constant 8.617*10^(-5)
K = 8.617*10^(-5)
save_plot <- function(filepath, plo){
pdf(paste0(filepath,".pdf"))
print(plo)
graphics.off()
}
library(RColorBrewer)
# devide the temperature into 4 groups ((-5:10, 10:20, 20:30, 30:40))
df1 <- subset(info0, info0$temp_c >= -5 & info0$temp_c < 10)
df2 <- subset(info0, info0$temp_c >= 10 & info0$temp_c < 20)
df3 <- subset(info0, info0$temp_c >= 20 & info0$temp_c < 30)
df4 <- subset(info0, info0$temp_c >= 30 & info0$temp_c < 40)
df1$temp_c_group <- "-5~10 °C"
df2$temp_c_group <- "10~20 °C"
df3$temp_c_group <- "20~30 °C"
df4$temp_c_group <- "30~40 °C"
info4 <- rbind(df1,df2,df3,df4)
info4$temp_c_group <- factor(info4$temp_c_group, levels = unique(info4$temp_c_group))
# devide the temperature into 5 groups ((-5:5, 5:10, 10:20, 20:30, 30:40))
dm1 <- subset(info0, info0$temp_c >= -5 & info0$temp_c < 5)
dm2 <- subset(info0, info0$temp_c >= 5 & info0$temp_c < 10)
dm3 <- subset(info0, info0$temp_c >= 10 & info0$temp_c < 20)
dm4 <- subset(info0, info0$temp_c >= 20 & info0$temp_c < 30)
dm5 <- subset(info0, info0$temp_c >= 30 & info0$temp_c < 40)
dm1$temp_c_group <- "-5~5 °C"
dm2$temp_c_group <- "5~10 °C"
dm3$temp_c_group <- "10~20 °C"
dm4$temp_c_group <- "20~30 °C"
dm5$temp_c_group <- "30~40 °C"
info5 <- rbind(dm1,dm2,dm3,dm4,dm5)
info5$temp_c_group <- factor(info5$temp_c_group, levels = unique(info5$temp_c_group))
ggplot(data = info5, aes(x = log.one.t, y = log.r)) +
geom_point(size = 1) +
stat_smooth(formula = y~x, method = lm, se = TRUE)
