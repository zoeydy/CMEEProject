getwd()
setwd(~/Documents)
############# Exploring the data (extend the script below)  ###############
# tidyverse
# install.packages(c("tidyverse"))
# sudo apt install r-cran-tidyverse
require(tidyverse)
warnings()
install.packages("tidyverse")
require(tidyverse)
library(tidyverse)
install.packages("tidyverse")
install.packages("tidyverse")
library(tidyverse)
############# Exploring the data (extend the script below)  ###############
# tidyverse
# !!!!!!!!!!!!!!!!!!!!!!!!!
# install.packages(c("tidyverse"))
# sudo apt install r-cran-tidyverse
require(tidyverse)
# list the package to if there are some name-conflict-masking messages
tidyverse_packages(include_self = TRUE) # the include_self = TRUE means list "tidyverse" as well
install.packages("raster", "sf", "sp", "rgeos", "rgdal", "lwgeom")
install.packages("raster", "sp", "rgeos", "rgdal", "lwgeom")
install.packages("raster" "sf" "sp" "rgeos" "rgdal" "lwgeom")
install.packages("raster")
require(raster)
install.packages('raster')
install.packages('sf')
require(raster)
require(sf)
install.packages('sf')
install.packages('sp')
install.packages("sp")
install.packages('sf') # Core vector GIS data package
install.packages('rgeos') # Extends vector data functionality
install.packages('rgdal') # Interface to the Geospatial Data Abstraction Library
install.packages('lwgeom') # Extends vector data functionality
library(rgdal)
library(raster)
library(sf)
library(sp)
library(units)
install.packages('raster') # Core raster GIS data package
install.packages('sf') # Core vector GIS data package
install.packages('raster') # Core raster GIS data package
install.packages('sf') # Core vector GIS data package
install.packages('sp') # Another core vector GIS package
install.packages('rgeos') # Extends vector data functionality
install.packages('rgdal') # Interface to the Geospatial Data Abstraction Library
install.packages('lwgeom') # Extends vector data functionality
library(rgdal)
library(raster)
library(sf)
library(sp)
library(units)
install.packages('rgeos')
install.packages('rgeos')
require(rgeos)
install.packages('rgdal')
install.packages('rgdal')
require(rgdal)
install.packages('lwgeom')
devtools::install_github("r-spatial/lwgeom")
install.packages('lwgeom')
install.packages('sf')
install.packages('lwgeom')
rm(list = ls())
View(result)
require(doParallel)
# do several simulations
cl <- makeCluster(100)
registerDoParallel(cl)
sim_genetic_drive <- function(q0, d, t, N0, R0, M){
if(q0 <= 0 || q0 >0.5){
stop('make sure 0<q0<0.5')
}
if(d<=0.5 || d>1){
stop('make sure 0.5<d<1')
}
bh <- function(N, R0, M){
return(ceiling(R0*N/(1+N/M)))
}
count_genotype <- function(x){
temp <- apply(x, 2, sum)
return(c(sum(temp==0),sum(temp==1), sum(temp==2)))
}
population <- list()
length(population) <- (t+1)
population.size <- rep(NA, t+1)
TG.freq <- rep(NA, t+1)
population.size[1] <- N0
TG.freq[1] <- q0
k <- ceiling(2*N0*q0)
population[[1]] <- cbind(matrix(c(0,0), nrow = 2, ncol = N0-k), matrix(c(0,1), nrow = 2, ncol = k))
genotype <- count_genotype(population[[1]])
for (i in t) {
population.size[[i+1]] <- bh(genotype[1]+genotype[2], R0, M)
if(population.size[i+1]<=1){
print(paste0('Population crashed after generation ', i))
return(list(population[1:i], population.size[1:i], TG.freq[1:i]))
}
if(genotype[2]+genotype[3]==0){
print(paste0('TG allele went extinct after generation ', i))
return(list(population[1:i], population.size[1:i], TG.freq[1:i]))
}
TG.gametic.freq <- d*genotype[2]/(genotype[1]+genotype[2])
# sample the next generation
population[[i+1]] <- matrix(
sample(0:1, size = 2*population.size[i+1],
prob = c(1-TG.gametic.freq, TG.gametic.freq), replace = TRUE),
nrow=2)
# calculate new genotype counts and TG frequency
genotype <- count_genotype(population[[i+1]])
TG.freq[i+1] <- (0.5*genotype[2]+genotype[3]) / population.size[i+1]
}
return(list(population=population, population.size= population.size, TG.freq=TG.freq))
}
# do several simulations
cl <- makeCluster(100)
registerDoParallel(cl)
result <- foreach(1:100, .combine = 'c') %dopar%{
data <- sim_genetic_drive(q0=0.05, d=0.6, t=10, N0=500, R0=2, M=500)
return(mean(data$population_size), var(data$population_size))
}
result
# do several simulations
cl <- makeCluster(100)
registerDoParallel(cl)
result <- foreach(1:100, .combine = 'c') %dopar%{
data <- sim_genetic_drive(q0=0.05, d=0.6, t=10, N0=500, R0=2, M=500)
return(list(mean(data$population_size), var(data$population_size)))
}
result
result <- foreach(1:100, .combine = 'c') %dopar%{
data <- sim_genetic_drive(q0=0.05, d=0.6, t=10, N0=500, R0=2, M=500)
return(mean(data$population_size))
}
result
stopCluster()
result
# do several simulations
cl <- makeCluster(100)
registerDoParallel(cl)
result <- foreach(1:100, .combine = 'c') %dopar%{
data <- sim_genetic_drive(q0=0.05, d=0.6, t=10, N0=500, R0=2, M=500)
return(mean(data))
}
stopCluster()
result
# do several simulations
cl <- makeCluster(100)
registerDoParallel(cl)
result <- foreach(1:100, .combine = 'c') %dopar%{
data <- sim_genetic_drive(q0=0.05, d=0.6, t=50, N0=500, R0=2, M=500)
return(mean(data))
}
stopCluster()
result
sim_genetic_drive(q0=0.05, d=0.6, t=10, N0=500, R0=2, M=500)
sim_genetic_drive(q0=0.05, d=0.6, t=10, N0=500, R0=2, M=500)
# do several simulations
cl <- makeCluster(100)
registerDoParallel(cl)
result <- foreach(1:100, .combine = 'c') %dopar%{
data <- sim_genetic_drive(q0=0.05, d=0.6, t=50, N0=500, R0=2, M=500)
return()
}
stopCluster()
result
install.packages("matrixcalc")
install.packages("matlib")
version
install.packages("matlib")
source('~/.active-rstudio-document', echo=TRUE)
P100
library(matlib)
A <- matrix(c(5,1,3,-1,2,2,2,-1,-1), nrow = 3)
a <- c(6,-1,1)
solve(A, a)
A <- matrix(c(3,5,2,2,3,4,1,2,1), nrow = 3)
a <- c(500,900,550)
solve(A, a)
A <- matrix(c(3,5,2,2,3,4), nrow = 2)
a <- c(500,900)
plotEqn(A,a)
plotEqn3d(A,a)
require(matrixcalc)
M <- matrix(c(0.94,0.05,0.01,0.02,0.86,0.12,0.01,0.06,0.93),nrow = 3)
matrix.power(M, 19)
matrix.power(M, 3)
matrix.power(M, 1)
matrix.power(M, 2)
matrix.power(M, 3)
matrix.power(M, 4)
matrix.power(M, 5)
matrix.power(M, 6)
matrix.power(M, 7)
matrix.power(M, 8)
a <- 26+41+74
matrix(c(26/a,41/a, 74/a), nrow = 3, ncol = 1)
matrix.power(M, 100)
eigen(M)
M <- matrix(c(0.8,0.2,0.1,0.9),nrow = 2)
matrix.power(M, 1)
matrix.power(M, 2)
matrix.power(M, 3)
matrix.power(M, 4)
matrix.power(M, 5)
matrix.power(M, 6)
matrix.power(M, 7)
matrix.power(M, 100)
eigen(M)
M <- matrix(c(3,-2,3,2,-2,6,-1,2,-1),nrow = 3)
eigen(M)
M <- matrix(c(0.8,0.2,0.1,0.9),nrow = 2)
matrix.power(M, 1)
matrix.power(M, 2)
matrix.power(M, 3)
matrix.power(M, 4)
matrix.power(M, 5)
matrix.power(M, 6)
matrix.power(M, 7)
matrix.power(M, 100)
eigen(M)
M <- matrix(c(8,2,1,9),nrow = 2)
matrix.power(M, 1)
matrix.power(M, 2)
matrix.power(M, 3)
matrix.power(M, 4)
matrix.power(M, 5)
matrix.power(M, 6)
matrix.power(M, 7)
matrix.power(M, 100)
eigen(M)
M <- matrix(c(0.8,0.2,0.1,0.9),nrow = 2)
matrix.power(M, 1)
matrix.power(M, 2)
matrix.power(M, 3)
matrix.power(M, 4)
matrix.power(M, 5)
matrix.power(M, 6)
matrix.power(M, 7)
matrix.power(M, 100)
eigen(M)
M <- matrix(c(0.2,0.8,0.9,0.1),nrow = 2)
matrix.power(M, 1)
matrix.power(M, 2)
matrix.power(M, 3)
matrix.power(M, 4)
matrix.power(M, 5)
matrix.power(M, 6)
matrix.power(M, 7)
matrix.power(M, 100)
eigen(M)
M <- matrix(c(0.9,0.1,0.2,0.8),nrow = 2)
matrix.power(M, 1)
matrix.power(M, 2)
matrix.power(M, 3)
matrix.power(M, 4)
matrix.power(M, 5)
matrix.power(M, 6)
matrix.power(M, 7)
matrix.power(M, 100)
eigen(M)
setwd("~/Documents/Project/SamTurner/code")
source('~/Documents/Project/SamTurner/code/model_fitting.R')
all_models
IDs
nlslm_formula
init.lowers[i]
i
n_param
init.lowers
nlslm_formula
adj_subset
fmla
fit_models <- function(IDs, models){
fit_list <- list()
for (id in IDs){
if (id %% 20 == 0){
print(paste0(as.character(id), ' / 287 fits completed'))
}
fit_list[[id]] <- list()
fits <- fit_models_multi(id, models)
for (model in models){
if (is.list(fits[[model]])){
fit_list[[id]][[model]] <- fits[[model]]
}
else{
fit_list[[id]][[model]] <- 0
}
}
}
return(fit_list)
}
fit_list <- fit_models(IDs, all_models)
IDs
all_models
fit_list <- fit_models(IDs, Gompertz)
fit_list <- fit_models(IDs, 'Gompertz')
fit_list <- list()
id
fit_list[[id]] <- list()
fits <- fit_models_multi(id, models)
models
models
models <- c("Gompertz" "Baranyi"  "Buchanan")
models <- c("Gompertz", "Baranyi",  "Buchanan")
# list to store fitted models
fit_objects <- list(names = models)
models
for (model_name in models){
# check if model should be fit in linear space
linear <- (model_name %in% linear_space_models)
model_fit_function <- fit_functions[[model_name]]
model_draw_function <- draw_functions[[model_name]]
# check if model can be fit with OLS
if (!(model_name %in% c(non_linear_models, paste0(non_linear_models, ".exp")))){
degree <- model_fit_function
if (linear){
result <- try(ModelFit <- lm(PopBio ~ poly(Time,degree = degree, raw=T), data=subset), silent = F)
}
else {
result <- try(ModelFit <- lm(logPopBio ~ poly(Time,degree = degree, raw=T), data=subset), silent = F)
}
}
# otherwise fit with nlsLM
else if (model_name %in% c(non_linear_models, linear_space_models)){
# generate list of parameter names of appropriate length
id_inits <- get_inits(id)
# if model is logistic, need linear space initial values
if (model_name == "Logistic" | model_name == "Logistic.exp"){
# set multistart iterations
iters <- c(3,3,3)
# produce param name vector
params <- paste0("x", 1:3)
adj_subset <- subset
# set initial value ranges
model_inits <- id_inits[["lin"]][-4]
model_inits.lower <- c(x1 = model_inits[[1]]-0.5*abs(model_inits[[1]]), x2 = model_inits[[2]]-0.5*abs(model_inits[[2]]), x3 = model_inits[[3]]-0.5*abs(model_inits[[3]]))
model_inits.upper <- c(x1 = model_inits[[1]]+0.5*abs(model_inits[[1]]), x2 = model_inits[[2]]+0.5*abs(model_inits[[2]]), x3 = model_inits[[3]]+0.5*abs(model_inits[[3]]))
# set bounds
pop <- subset$PopBio
lowers = c(-Inf,mean(pop), -Inf)
uppers = c(mean(pop),max(pop)*1.1, Inf)
}
else{
# param iterations
iters <- c(3,3,5,5)
pop <- subset$logPopBio
tmax <- max(subset$Time)
# param name vector
params <- paste0("x", 1:4)
time_removed <- removed_times[id,"time_removed"]
# adjust so first data point at t = 0 : found to improve model fit
adj_subset <- subset
adj_subset$Time <- adj_subset$Time - time_removed
# set parameter ranges
model_inits <- id_inits[["log"]]
model_inits.lower <- c(x1 = model_inits[[1]]-0.6*abs(model_inits[[1]]), x2 = model_inits[[2]]-0.6*abs(model_inits[[2]]), x3 = model_inits[[3]]-0.8*abs(model_inits[[3]]), x4 = max(model_inits[[4]]-time_removed-0.1*tmax, -time_removed))
model_inits.upper <- c(x1 = model_inits[[1]]+0.2*abs(model_inits[[1]]), x2 = model_inits[[2]]+0.6*abs(model_inits[[2]]), x3 = model_inits[[3]]+0.8*abs(model_inits[[3]]), x4 = model_inits[[4]]-time_removed+0.1*tmax)
# set bounds
min_pop <- min(adj_subset$logPopBio)
max_pop <- max(adj_subset$logPopBio)
mean_pop <- mean(adj_subset$logPopBio)
ran_pop <- max(adj_subset$logPopBio) - min(adj_subset$logPopBio)
lowers = c(min_pop - ran_pop / 2 - 5,mean_pop,-Inf,-round(time_removed,digits = 10))
uppers = c(mean_pop, max_pop + ran_pop / 2,Inf,Inf)
}
# if linear space model, fit to linear PopBio
if (linear) {
nlslm_formula <- as.formula(paste("PopBio ~ model_fit_function(Time, ", paste(params, collapse= ","), ")"))
}
# if log space model, fit to  logPopBio
else{
nlslm_formula <- as.formula(paste("logPopBio ~ model_fit_function(Time, ", paste(params, collapse= ","), ")"))
}
# try to fit model with multistart
try(ModelFit <- nls_multistart(nlslm_formula, d = adj_subset, init.lowers = model_inits.lower, init.uppers = model_inits.upper,lowers = lowers, uppers = uppers ,repeats = iters))
}
# if unsuccessful, fit using randomly sampled initial values
if ( is.null(ModelFit)){
try(ModelFit <- deep_fit(nlslm_formula, data = subset, inits = unlist(model_inits), lowers = lowers, uppers = uppers) )
if (is.null(ModelFit)){
print(paste0("ID ", as.character(id), ": Fit unsuccessful for ", model_name))
}
}
fit_objects[[model_name]] <- ModelFit
}
model_name
# check if model should be fit in linear space
linear <- (model_name %in% linear_space_models)
model_fit_function <- fit_functions[[model_name]]
model_draw_function <- draw_functions[[model_name]]
!(model_name %in% c(non_linear_models, paste0(non_linear_models, ".exp")))
model_name %in% c(non_linear_models, linear_space_models)
# generate list of parameter names of appropriate length
id_inits <- get_inits(id)
model_name == "Logistic" | model_name == "Logistic.exp"
# param iterations
iters <- c(3,3,5,5)
pop <- subset$logPopBio
tmax <- max(subset$Time)
# param iterations
iters <- c(3,3,5,5)
subset
pop <- subset$logPopBio
# subset data
subset <- data[data$ID == id,]
# adjust so first data point at t = 0 : found to improve model fit
adj_subset <- subset
adj_subset$Time <- adj_subset$Time - time_removed
model_name == "Logistic" | model_name == "Logistic.exp"
pop <- subset$logPopBio
tmax <- max(subset$Time)
# param name vector
params <- paste0("x", 1:4)
time_removed <- removed_times[id,"time_removed"]
# adjust so first data point at t = 0 : found to improve model fit
adj_subset <- subset
adj_subset$Time <- adj_subset$Time - time_removed
# set parameter ranges
model_inits <- id_inits[["log"]]
model_inits.lower <- c(x1 = model_inits[[1]]-0.6*abs(model_inits[[1]]), x2 = model_inits[[2]]-0.6*abs(model_inits[[2]]), x3 = model_inits[[3]]-0.8*abs(model_inits[[3]]), x4 = max(model_inits[[4]]-time_removed-0.1*tmax, -time_removed))
model_inits.upper <- c(x1 = model_inits[[1]]+0.2*abs(model_inits[[1]]), x2 = model_inits[[2]]+0.6*abs(model_inits[[2]]), x3 = model_inits[[3]]+0.8*abs(model_inits[[3]]), x4 = model_inits[[4]]-time_removed+0.1*tmax)
# set bounds
min_pop <- min(adj_subset$logPopBio)
max_pop <- max(adj_subset$logPopBio)
mean_pop <- mean(adj_subset$logPopBio)
ran_pop <- max(adj_subset$logPopBio) - min(adj_subset$logPopBio)
lowers = c(min_pop - ran_pop / 2 - 5,mean_pop,-Inf,-round(time_removed,digits = 10))
uppers = c(mean_pop, max_pop + ran_pop / 2,Inf,Inf)
lowers
uppers
linear
nlslm_formula <- as.formula(paste("logPopBio ~ model_fit_function(Time, ", paste(params, collapse= ","), ")"))
# try to fit model with multistart
try(ModelFit <- nls_multistart(nlslm_formula, d = adj_subset, init.lowers = model_inits.lower, init.uppers = model_inits.upper,lowers = lowers, uppers = uppers ,repeats = iters))
nlslm_formula
adj_subset
model_inits.lower
init.uppers
model_inits.upper
lowers
uppers
iters
-round(time_removed,digits = 10
)
time_removed
removed_times
adj_subset$Time - time_removed
time_removed
removed_times[id,"time_removed"]
removed_times
